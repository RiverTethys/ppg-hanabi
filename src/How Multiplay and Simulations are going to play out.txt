What's required for interpreting a Multi-Play clue:

Everyone analyzes all clues.
If a clue is given to someone n spaces away from the source, it's not playable, and it would be playable if some cards (fewer than n) were played in the meantime, then you should try playing an in-between card that you know about in your hand, and if you don't know about any of them, then you go with the newest card that could possibly be that card.  However, if the inbetween card is visible in someone else's hand where they will play it before the clued card, you let them do so.



What's required for giving/predicting a Multi-Play clue:
since we will not include multi-play cluing in base case behavior, there will be no need to predict it with flows.  It will merely be "predicted" by the people who see a clue as a multi-play clue and succeed in playing correctly.



To do:
Still need to initialize tricorders with target game paths so that the trike can find its next simulation level.
Need to have simulated games actually take turns as part of the simulation process (make sure all the lower-level games are updating properly and that player order is shifting in each game as appropriate)
Not sure whether this is going to create all the choices and then loop over them at the top level or whether it's going to be more of a tail recursion, evaluating the event lists as they come up the chain, or both.

Thinking about having a secondary evaluation procedure (takes a list of events and spits out an evaluation), which does require running more sims.   This will be a time vs. easiness to code issue.  Might want to think about alternatives.

then need the recursive code, mimicking a game round.
then need the garbage collection and/or reset capabilities.
Might need to clean functions out of the Player/NPC classes or put them back there.
